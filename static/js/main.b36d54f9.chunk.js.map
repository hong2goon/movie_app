{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","poster","title","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenre","key","slice","src","ProtoTypes","string","isRequired","array","App","state","_getMovies","a","async","_callApi","movies","setState","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UA+BA,SAASA,EAAT,GAAmD,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACrC,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAACC,EAAD,CAAaL,OAAQA,EAAQM,IAAKL,KAEpC,yBAAKG,UAAU,iBACb,4BAAKH,GACL,yBAAKG,UAAU,iBACZF,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,QAE/D,uBAAGL,UAAU,mBACVD,EAASS,MAAM,EAAG,KAAK,0BAAMR,UAAU,iBAAhB,UAOlC,SAASC,EAAT,GAAqC,IAAfL,EAAc,EAAdA,OAAQM,EAAM,EAANA,IAC5B,OACE,yBAAKO,IAAKb,EAAQM,IAAKA,EAAKL,MAAOK,EAAKF,UAAU,kBAItD,SAASM,EAAT,GAA8B,IAATF,EAAQ,EAARA,MACnB,OACE,0BAAMJ,UAAU,gBAAgBI,GAIpCT,EAAMe,WAAa,CACjBb,MAAOa,IAAWC,OAAOC,WACzBhB,OAAQc,IAAWC,OAAOC,WAC1Bd,OAAQY,IAAWG,MAAMD,WACzBb,SAAUW,IAAWC,OAAOC,YAG9BX,EAAYS,WAAa,CACvBd,OAAQc,IAAWC,OAAOC,WAC1BV,IAAKQ,IAAWC,OAAOC,YAGzBN,EAAWI,WAAa,CACtBN,MAAOM,IAAWC,OAAOC,YAKZjB,QCYAmB,E,2MAvFbC,MAAQ,G,EA6CRC,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLC,EADK,OAEX,EAAKC,SAAS,CACZD,WAHS,sC,EAObD,SAAW,WACT,OAAOG,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG5BG,cAAgB,WASd,OARe,EAAKhB,MAAMK,OAAOjB,KAAI,SAAA6B,GACnC,OAAO,kBAAC,EAAD,CACLnC,MAAOmC,EAAMC,cACbrC,OAAQoC,EAAME,mBACdpC,OAAQkC,EAAMlC,OACdC,SAAUiC,EAAMjC,SAChBQ,IAAKyB,EAAMG,S,mFAhDfN,QAAQC,IAAI,aAuBZM,KAAKpB,e,+BA+BLa,QAAQC,IAAI,UADN,IAEEV,EAAWgB,KAAKrB,MAAhBK,OACR,OACE,yBAAKpB,UAAWoB,EAAS,MAAQ,gBAK9BgB,KAAKrB,MAAMK,OAASgB,KAAKL,gBAAkB,e,GAlFlCM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.b36d54f9.chunk.js","sourcesContent":["// import React, { Component } from 'react';\nimport React from 'react';\nimport ProtoTypes from 'prop-types';\nimport './Movie.css';\n\n// class Movie extends Component {\n//   static protoTypes = {\n//     title: ProtoTypes.string.isRequired,\n//     poster: ProtoTypes.string,\n//   };\n\n//   render() {\n//     return(\n//       <div>\n//         <h1>{this.props.title}</h1>\n//         <MoviePoster poster={this.props.poster} />\n//       </div>\n//     );\n//   }\n// }\n\n// class MoviePoster extends Component {\n//   render() {\n//     return(\n//       <div>\n//         <img src={this.props.poster} alt=\"\" style={{ width: '100px' }}/>\n//       </div>\n//     )\n//   }\n// }\n\nfunction Movie({poster, title, genres, synopsis}) {\n  return(\n    <div className=\"Movie\">\n      <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Column\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n        </div>\n        <p className=\"Movie__Synopsis\">\n          {synopsis.slice(0, 100)}<span className=\"txt__ellipsis\">...</span>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nfunction MoviePoster({poster, alt}) {\n  return(\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n  )\n}\n\nfunction MovieGenre({genre}) {\n  return(\n    <span className=\"Movie__Genre\">{genre}</span>\n  )\n}\n\nMovie.ProtoTypes = {\n  title: ProtoTypes.string.isRequired,\n  poster: ProtoTypes.string.isRequired,\n  genres: ProtoTypes.array.isRequired,\n  synopsis: ProtoTypes.string.isRequired\n}\n\nMoviePoster.ProtoTypes = {\n  poster: ProtoTypes.string.isRequired,\n  alt: ProtoTypes.string.isRequired\n}\n\nMovieGenre.ProtoTypes = {\n  genre: ProtoTypes.string.isRequired\n}\n\n\n\nexport default Movie;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  state = {\n    // greeting: 'hello!',\n    // movies : [\n    //   { \n    //     title: 'Aladin',\n    //     poster: 'https://post-phinf.pstatic.net/MjAxOTA1MjNfNTMg/MDAxNTU4NTg0MTA4OTMz.2gWQ96dWAvWyzVSNORepej3YHgGdgjBateq0GJ-8r80g.EXLjLV2nwMMEs9K4Aa6Pl9vW-xYYq5mbKuNA-gVNoTwg.JPEG/%EB%A9%94%EC%9D%B8%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg?type=w1200',\n    //   },\n    //   {\n    //     title: 'Lion King',\n    //     poster: 'https://pds.joins.com/news/component/htmlphoto_mmdata/201907/21/htm_201907211813485618.jpg',\n    //   },\n    // ],\n  }\n\n  // componentWillMount() {\n  //   console.log('will mount');\n  // }\n  \n  componentDidMount() {\n    console.log('did mount');\n    // setTimeout(() => {\n    //   // this.setState({\n    //   //   greeting: 'enjoy~'\n    //   // })\n    //   this.setState({\n    //     movies: [\n    //       // ...this.state.movies,\n    //       { \n    //         title: 'Aladin',\n    //         poster: 'https://post-phinf.pstatic.net/MjAxOTA1MjNfNTMg/MDAxNTU4NTg0MTA4OTMz.2gWQ96dWAvWyzVSNORepej3YHgGdgjBateq0GJ-8r80g.EXLjLV2nwMMEs9K4Aa6Pl9vW-xYYq5mbKuNA-gVNoTwg.JPEG/%EB%A9%94%EC%9D%B8%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg?type=w1200',\n    //       },\n    //       {\n    //         title: 'Lion King',\n    //         poster: 'https://pds.joins.com/news/component/htmlphoto_mmdata/201907/21/htm_201907211813485618.jpg',\n    //       },\n    //       {\n    //         title: 'Beauty and Beast',\n    //         poster: 'https://t1.daumcdn.net/movie/a0ecb5da1435edab622d7c23eb0c7ef447a569ba',\n    //       }\n    //     ]\n    //   })\n    // }, 5000);\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    //.then(json => console.log(json))\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id} />\n    })\n    return movies\n  }\n\n  render(){\n    console.log('render');\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {/* {this.state.greeting} */}\n        {/* {this.state.movies.map((movie, index) => {\n          return <Movie title={movie.title} poster={movie.poster} key={index} />\n        })} */}\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}